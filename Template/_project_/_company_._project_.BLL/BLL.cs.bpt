using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using {Namespace}.Entity;
using {Namespace}.DAL;

namespace {Namespace}.BLL
{
    public partial class {ClassName}Bussiness
    {
	    #region 基础信息

        private const string ConnectionName = "{ConnectionName}";

        #endregion
		
		#region {TableName}

		/// <summary>
        /// 增加一条数据
        /// </summary>
		public static int Add({ClassName} model)
		{
			return DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_Add(model);
		}

		/// <summary>
        /// 更新一条数据
        /// </summary>
		public static bool Update({ClassName} model)
		{
			return DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_Update(model);
		}

        /// <summary>
        /// 删除一条数据
        /// </summary>
		public static bool Delete({PKRow[CSharpType]} {PKName})
		{
			return DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_Delete({PKName});
		}

        /// <summary>
        /// 批量删除数据
        /// </summary>
		public static bool DeleteList(string {PKName}list)
		{
			return DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_DeleteList({PKName}list);
		}
        
        /// <summary>
        /// 得到一个对象实体
        /// </summary>
		public static {Namespace}.Entity.{ClassName} GetModel({PKRow[CSharpType]} {PKName})
		{
			return DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_GetModel({PKName});
		}

        /// <summary>
        /// 获得数据列表
        /// </summary>
		public static List<{ClassName}> GetList(string strWhere = "")
        {
            return {ClassName}DataSet_ToList(DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_GetList(strWhere).Tables[0]);
        }
        
        /// <summary>
        /// 获得前几行数据
        /// </summary>
		public static List<{ClassName}> GetList(int top, string strWhere, string filedOrder)
        {
            return {ClassName}DataSet_ToList(DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_GetList(top, strWhere, filedOrder).Tables[0]);
        }

        /// <summary>
        /// 获取记录总数
        /// </summary>
		public static int GetRecordCount(string strWhere = "")
        {
            return DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_GetRecordCount(strWhere);
        }

        /// <summary>
        /// 分页获取数据列表
        /// </summary>
		public static List<{ClassName}> GetListByPage(string strWhere, string orderBy, int startIndex, int endIndex)
        {
            return {ClassName}DataSet_ToList(DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_GetListByPage(strWhere, orderBy, startIndex, endIndex).Tables[0]);
        }

		/// <summary>
        /// 分页获取数据列表
        /// </summary>
        /// <param name="pageSize">每页大小</param>
        /// <param name="pageIndex">页标</param>
        /// <param name="strWhere">查询条件</param>
        /// <param name="pagetotal">总页数</param>
        /// <param name="total">总数</param>
        /// <param name="orderType">排序规则， 默认降序，1降序，0升序</param>
        /// <param name="showName">显示字段，默认全部</param>
        /// <param name="orderKey">排序key，默认主键</param>
        /// <returns></returns>
		public static List<{ClassName}> GetListByPage(int pageSize, int pageIndex, string strWhere, out int pagetotal, out int total, int orderType = 1, string showName = "*", string orderKey = "{PKRow[FieldName]}")
		{
            return {ClassName}DataSet_ToList(DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_GetListByPage(pageSize, pageIndex, strWhere, out pagetotal, out total, orderType, showName, orderKey));
        }

		private static List<{ClassName}> {ClassName}DataSet_ToList(DataTable dt)
		{
			var rows = dt.Rows;
            var list = new List<{ClassName}>();
            foreach (DataRow r in rows)
            {
                list.Add(DatabaseProvider.Get{ClassName}(ConnectionName).{ClassName}_DataRowToModel(r));
            }
            return list;
		}

		#endregion 
	}
}